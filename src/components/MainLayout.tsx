import { useState, useEffect } from "react";
import { ResizableHandle, ResizablePanel, ResizablePanelGroup } from "@/components/ui/resizable";
import { ChatInterface } from "./ChatInterface";
import { PreviewWindow } from "./PreviewWindow";
import { Header } from "./Header";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { Loader2 } from "lucide-react";

export interface Project {
  id: string;
  name: string;
  description?: string;
  files: Record<string, string>;
  createdAt: Date;
  updatedAt: Date;
}

export const MainLayout = () => {
  const [currentProject, setCurrentProject] = useState<Project | null>(null);
  const [projects, setProjects] = useState<Project[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const { toast } = useToast();

  // Load projects from database
  const loadProjects = async () => {
    try {
      const { data: projectsData, error: projectsError } = await supabase
        .from('projects')
        .select('*')
        .order('created_at', { ascending: false });

      if (projectsError) throw projectsError;

      const projectsWithFiles = await Promise.all(
        projectsData.map(async (project) => {
          const { data: filesData, error: filesError } = await supabase
            .from('project_files')
            .select('*')
            .eq('project_id', project.id);

          if (filesError) throw filesError;

          const files: Record<string, string> = {};
          filesData.forEach(file => {
            files[file.filename] = file.content;
          });

          return {
            id: project.id,
            name: project.name,
            description: project.description,
            files,
            createdAt: new Date(project.created_at),
            updatedAt: new Date(project.updated_at)
          };
        })
      );

      setProjects(projectsWithFiles);
      
      // Try to restore the previously active project from localStorage
      const savedProjectId = localStorage.getItem('currentProjectId');
      const savedProject = savedProjectId ? projectsWithFiles.find(p => p.id === savedProjectId) : null;
      
      if (savedProject) {
        setCurrentProject(savedProject);
      } else if (projectsWithFiles.length > 0) {
        setCurrentProject(projectsWithFiles[0]);
        localStorage.setItem('currentProjectId', projectsWithFiles[0].id);
      } else {
        await createDefaultProject();
      }
    } catch (error) {
      console.error('Error loading projects:', error);
      toast({
        title: "Error",
        description: "Failed to load projects",
        variant: "destructive",
      });
      await createDefaultProject();
    } finally {
      setIsLoading(false);
    }
  };

  // Create default project
  const createDefaultProject = async () => {
    const defaultProject: Project = {
      id: crypto.randomUUID(),
      name: "My First App",
      description: "Welcome to AppBuilder AI",
      files: {
        "index.html": `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My App</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 16px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
            max-width: 600px;
        }
        h1 {
            color: #333;
            margin-bottom: 20px;
            font-size: 2.5rem;
        }
        p {
            color: #666;
            font-size: 1.2rem;
            line-height: 1.6;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Welcome to Your App! ðŸš€</h1>
        <p>This is a sample app generated by your AI assistant. You can ask me to modify it or create something completely new!</p>
    </div>
</body>
</html>`
      },
      createdAt: new Date(),
      updatedAt: new Date()
    };

    try {
      await saveProjectToDatabase(defaultProject);
      setProjects([defaultProject]);
      setCurrentProject(defaultProject);
    } catch (error) {
      console.error('Error creating default project:', error);
      // Fallback to local state
      setProjects([defaultProject]);
      setCurrentProject(defaultProject);
    }
  };

  // Save project to database
  const saveProjectToDatabase = async (project: Project) => {
    try {
      // Insert or update project
      const { error: projectError } = await supabase
        .from('projects')
        .upsert({
          id: project.id,
          name: project.name,
          description: project.description,
          created_at: project.createdAt.toISOString(),
          updated_at: project.updatedAt.toISOString()
        });

      if (projectError) throw projectError;

      // Delete existing files for this project first
      const { error: deleteError } = await supabase
        .from('project_files')
        .delete()
        .eq('project_id', project.id);

      if (deleteError) throw deleteError;

      // Save files
      const fileInserts = Object.entries(project.files).map(([filename, content]) => ({
        project_id: project.id,
        filename,
        content,
        file_type: filename.split('.').pop() || 'html'
      }));

      const { error: filesError } = await supabase
        .from('project_files')
        .insert(fileInserts);

      if (filesError) throw filesError;
    } catch (error) {
      console.error('Error saving project:', error);
      throw error;
    }
  };

  // Load projects on mount
  useEffect(() => {
    loadProjects();
  }, []);

  // Save project when it changes
  useEffect(() => {
    if (currentProject && !isLoading) {
      const timeoutId = setTimeout(() => {
        saveProjectToDatabase(currentProject).catch(console.error);
      }, 1000); // Debounce saves

      return () => clearTimeout(timeoutId);
    }
  }, [currentProject, isLoading]);

  const handleProjectChange = (project: Project) => {
    setCurrentProject(project);
    localStorage.setItem('currentProjectId', project.id);
  };

  const handleCodeUpdate = (filename: string, content: string) => {
    if (!currentProject) return;

    const updatedProject = {
      ...currentProject,
      files: {
        ...currentProject.files,
        [filename]: content
      },
      updatedAt: new Date()
    };

    setCurrentProject(updatedProject);
    
    // Update projects array
    setProjects(prev => 
      prev.map(p => p.id === updatedProject.id ? updatedProject : p)
    );
  };

  const handleNewProject = async () => {
    const newProject: Project = {
      id: crypto.randomUUID(),
      name: `Project ${projects.length + 1}`,
      description: "New project created with AppBuilder AI",
      files: {
        "index.html": `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Project</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 16px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
            max-width: 600px;
        }
        h1 {
            color: #333;
            margin-bottom: 20px;
            font-size: 2.5rem;
        }
        p {
            color: #666;
            font-size: 1.2rem;
            line-height: 1.6;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Hello World! ðŸŒŸ</h1>
        <p>This is a new project. Ask me to build something amazing!</p>
    </div>
</body>
</html>`
      },
      createdAt: new Date(),
      updatedAt: new Date()
    };

    try {
      await saveProjectToDatabase(newProject);
      setProjects(prev => [newProject, ...prev]);
      setCurrentProject(newProject);
      
      toast({
        title: "Success",
        description: "New project created successfully!",
      });
    } catch (error) {
      console.error('Error creating new project:', error);
      toast({
        title: "Error",
        description: "Failed to create new project",
        variant: "destructive",
      });
    }
  };

  const handleProjectUpdated = (updatedProject: Project) => {
    setProjects(prev => 
      prev.map(p => p.id === updatedProject.id ? updatedProject : p)
    );
    setCurrentProject(updatedProject);
  };

  const handleProjectDeleted = async (projectId: string) => {
    const remainingProjects = projects.filter(p => p.id !== projectId);
    setProjects(remainingProjects);
    
    // If the deleted project was the current project, switch to another or create a new one
    if (currentProject?.id === projectId) {
      if (remainingProjects.length > 0) {
        setCurrentProject(remainingProjects[0]);
      } else {
        // Create a new default project if no projects remain
        await createDefaultProject();
      }
    }
  };

  if (isLoading) {
    return (
      <div className="h-screen flex items-center justify-center bg-background">
        <div className="flex items-center gap-2">
          <Loader2 className="h-6 w-6 animate-spin" />
          <span className="text-lg">Loading projects...</span>
        </div>
      </div>
    );
  }

  if (!currentProject) {
    return (
      <div className="h-screen flex items-center justify-center bg-background">
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">No projects found</h2>
          <p className="text-muted-foreground">Something went wrong. Please refresh the page.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-screen flex flex-col bg-background">
      <Header 
        currentProject={currentProject}
        projects={projects}
        onProjectChange={handleProjectChange}
        onProjectUpdated={handleProjectUpdated}
        onProjectDeleted={handleProjectDeleted}
        onNewProject={handleNewProject}
      />
      
      <ResizablePanelGroup direction="horizontal" className="flex-1">
        <ResizablePanel defaultSize={40} minSize={30}>
          <ChatInterface 
            currentProject={currentProject}
            onCodeUpdate={handleCodeUpdate}
          />
        </ResizablePanel>
        
        <ResizableHandle withHandle />
        
        <ResizablePanel defaultSize={60} minSize={40}>
          <PreviewWindow 
            files={currentProject.files}
            projectName={currentProject.name}
          />
        </ResizablePanel>
      </ResizablePanelGroup>
    </div>
  );
};